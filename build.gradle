plugins {
    id 'java'
    id 'maven'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'maven-publish'
}

group 'WildInspect'
version = "2.3.4"

compileJava.options.encoding = 'UTF-8'

repositories {
    maven { url 'https://repo.bg-software.com/repository/nms/' }
    maven { url 'https://repo.bg-software.com/repository/api/' }
    maven { url 'https://repo.bg-software.com/repository/public-libs/' }
    maven { url 'https://repo.bg-software.com/repository/common/' }

    String mavenUsername = project.hasProperty('mavenUsername') ? project.mavenUsername : System.getenv('mavenUsername')
    String mavenPassword = project.hasProperty('mavenPassword') ? project.mavenPassword : System.getenv('mavenPassword')

    if(mavenUsername != null && mavenPassword != null) {
        maven {
            url 'https://repo.bg-software.com/repository/private-libs/'
            credentials {
                username mavenUsername
                password mavenPassword
            }
        }
    }

}

dependencies {
    implementation 'com.bgsoftware.common.reflection:ReflectionUtils:latest'
    implementation 'com.bgsoftware.common.config:CommentedConfiguration:1.0.2'

    // Spigot jar
    compileOnly "org.spigotmc:v1_8_R3-Taco:latest"
    // CoreProtect
    compileOnly 'net.coreprotect:CoreProtect-6:latest'
    // Plugin Hooks
    compileOnly 'com.wasteofplastic:AcidIsland:latest'
    compileOnly 'com.wasteofplastic:ASkyblock:latest'
    compileOnly 'world.bentobox:BentoBox:latest'
    compileOnly 'com.drtshock:FactionsUUID:latest'
    compileOnly 'com.drtshock:FactionsUUID-New:latest'
    compileOnly 'net.prosavage:FactionsX:latest'
    compileOnly 'me.ryanhamshire:GriefPrevention:latest'
    compileOnly 'me.angeschossen:Lands:latest'
    compileOnly 'me.qiooip:Lazarus:latest'
    compileOnly 'com.massivecraft:Factions:latest'
    compileOnly 'com.massivecraft:MassiveCore:latest'
    compileOnly 'com.github.intellectualsites:PlotSquared-4:latest'
    compileOnly 'com.github.intellectualsites:PlotSquared-5:latest'
    compileOnly 'com.github.intellectualsites:PlotSquared-Legacy:latest'
    compileOnly 'com.bgsoftware:SuperiorSkyblockAPI:latest'
    compileOnly 'com.palmergames:Towny:latest'
    compileOnly 'com.stefthedev:Villages:latest'
}

jar {
    processResources {
        outputs.upToDateWhen {false}
        String versionNumber = System.getenv("BUILD_NUMBER") == null ? version : version + "." + System.getenv("BUILD_NUMBER")
        eachFile { details ->
            if (details.name.contentEquals('plugin.yml')) {
                filter { String line ->
                    line.replace('${project.version}', versionNumber)
                }
            }
        }
    }
}

shadowJar {
    dependsOn(jar)

    if(System.getenv("BUILD_NUMBER") == null){
        archiveName = rootProject.name + "-" + version + ".jar"
    }
    else{
        archiveName = rootProject.name + "-" + version + "-b" + System.getenv("BUILD_NUMBER") + ".jar"
    }

    delete fileTree('./target/') {
        exclude archiveName
    }

    destinationDir = file("./target/")
    from sourceSets.getByName("main").output
    configurations = [project.configurations.getByName("runtimeClasspath")]
}

build {
    dependsOn shadowJar
}

shadowJar.shouldRunAfter build